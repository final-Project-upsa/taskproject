#serializer.py 
from rest_framework import serializers
from django.contrib.auth.password_validation import validate_password
from django.db import transaction
from .models import CustomUser, UserProfile, Seller, Category, Product, Chat, Message
from djoser.serializers import UserCreateSerializer as DjoserUserCreateSerializer
from django.contrib.auth import get_user_model

User = get_user_model()

class UsercreateSerializer(DjoserUserCreateSerializer):
    class Meta(DjoserUserCreateSerializer.Meta):
        model = User
        fields = ['email', 'username', 'password', 'password2', 'first_name', 'last_name', 'phone_number', 'region']

class LoginSerializer(serializers.Serializer):
    email = serializers.EmailField()
    password = serializers.CharField(write_only=True, style={'input_type': 'password'})

class CustomUserSerializer(serializers.ModelSerializer):
    class Meta:
        model = CustomUser
        fields = ['id', 'email', 'username', 'first_name', 'last_name', 'phone_number']
        read_only_fields = ['id']

class RegisterSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True, required=True, validators=[validate_password])
    password2 = serializers.CharField(write_only=True, required=True)
    region = serializers.CharField(required=True, write_only=True)

    class Meta:
        model = CustomUser
        fields = ['email', 'username', 'password', 'password2', 'first_name', 'last_name', 
                 'phone_number', 'region']

    def validate(self, attrs):
        if attrs['password'] != attrs['password2']:
            raise serializers.ValidationError({"password": "Password fields didn't match."})
        return attrs

    @transaction.atomic
    def create(self, validated_data):
        region = validated_data.pop('region')
        password2 = validated_data.pop('password2')
        
        user = CustomUser.objects.create_user(
            email=validated_data['email'],
            username=validated_data['username'],
            password=validated_data['password'],
            first_name=validated_data.get('first_name', ''),
            last_name=validated_data.get('last_name', ''),
            phone_number=validated_data.get('phone_number', '')
        )

        user.profile.region = region
        user.profile.save()

        return user

class CategorySerializer(serializers.ModelSerializer):
    class Meta:
        model = Category
        fields = ['id', 'name', 'slug']
        read_only_fields = ['slug']

class SellerSerializer(serializers.ModelSerializer):
    user = CustomUserSerializer(read_only=True)

    class Meta:
        model = Seller
        fields = [ 'user', 'business_name', 'business_address', 'profile_photo', 
                 'id_card', 'is_approved', 'region']
        read_only_fields = ['is_approved']




#view
@api_view(['POST'])
@permission_classes([AllowAny])
def enroll_seller1(request):
    if request.method == 'POST':
        serializer = SellerSerializer(data=request.data)
        if serializer.is_valid():
            business_name = serializer.validated_data.get('business_name')
            if Seller.objects.filter(business_name=business_name).exists():
                return Response({'error': 'A seller with this business name already exists.'}, status=status.HTTP_400_BAD_REQUEST)
            else:
                seller = serializer.save(commit=False)
                seller.user = request.user  # Assign the logged-in user
                seller.save()
                return Response({'message': 'Seller registered successfully.', 'seller_id': seller.pk}, status=status.HTTP_201_CREATED)
        else:
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)



def seller_dashboard(request, pk):
    seller = get_object_or_404(Seller, pk=pk)
    return render(request, 'p2p_site/seller_dashboard.html', {'seller': seller})
#===================api============================================
@api_view(['GET'])
def seller_dashboardd(request, pk):
    seller = get_object_or_404(Seller, pk=pk)
    seller_serializer = SellerSerializer(seller )
    
    return Response({'seller': seller_serializer.data})






